<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:toolkitconverter="clr-namespace:WPFToolkit.Converters;assembly=WPFToolkit"
    xmlns:muct="clr-namespace:ModengTerm.UserControls.TerminalUserControls"
    xmlns:mcontrol="clr-namespace:ModengTerm.Controls"
    xmlns:converters="clr-namespace:ModengTerm.Styles">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WPFToolkit;component/ClearDefaultStyles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <converters:TreeViewItemIndentConverter x:Key="TreeViewItemIndentConverter"/>
    <converters:MenuItemHeaderBottomBorderConverter x:Key="MenuItemHeaderBottomBorderConverter"/>

    <!-- 通用控件 -->
    <!-- 动态引用Themes里的资源来实现动态换肤功能 -->

    <Style x:Key="StyleDocumentControl" TargetType="{x:Type muct:DocumentControl}">
        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type muct:DocumentControl}">

                    <ControlTemplate.Resources>

                        <Style x:Key="StyleScrollBar" TargetType="{x:Type ScrollBar}">
                            <Style.Resources>
                                <!-- 拖动标样式 -->
                                <Style x:Key="StyleThumbLocal" TargetType="{x:Type Thumb}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Opacity" Value="1"/>
                                        </Trigger>
                                    </Style.Triggers>
                                    <Setter Property="Opacity" Value="0.7"/>
                                    <Setter Property="Background" Value="#E8E8EC"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Grid x:Name="Grid">
                                                    <Border Background="{TemplateBinding Background}" Width="{TemplateBinding Width}"
                                        CornerRadius="3" Opacity="{TemplateBinding Opacity}"/>
                                                    <!--<Rectangle HorizontalAlignment="Stretch" x:Name="HoverRectangle" 
                                           VerticalAlignment="Stretch" Width="{TemplateBinding Width}" 
                                           Stroke="{x:Null}" Fill="{TemplateBinding Background}"
                                           Opacity="{TemplateBinding Opacity}"/>-->
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsFocused" Value="True" />
                                                    <Trigger Property="IsEnabled" Value="False" >
                                                        <Setter Property="Opacity" TargetName="Grid" Value="0.1"/>
                                                    </Trigger>
                                                    <Trigger Property="IsDragging" Value="True">
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <!-- 拖动条两边的RepeatButton -->
                                <Style x:Key="NuclearScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Setter Property="IsTabStop" Value="false" />
                                    <Setter Property="Focusable" Value="false" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Grid>
                                                    <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" 
                                       StrokeThickness="{TemplateBinding BorderThickness}" />
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

                                <Style x:Key="StyleRepeatButtonBase" TargetType="{x:Type RepeatButton}">
                                    <!--<Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#999999"/>
                    </Trigger>
                </Style.Triggers>-->
                                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <!--<Setter Property="Background" Value="#4D4D4D"/>-->
                                </Style>
                                <Style x:Key="StyleRepeatButtonDecrease" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ResourceKey=StyleRepeatButtonBase}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Grid>
                                                    <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Data="M 0 0 L 5 5 L 10 0 Z" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                        <Path.LayoutTransform>
                                                            <RotateTransform x:Name="RotateTransform" Angle="180"/>
                                                        </Path.LayoutTransform>
                                                    </Path>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                                <Style x:Key="StyleRepeatButtonIncrease" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ResourceKey=StyleRepeatButtonBase}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Grid>
                                                    <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Data="M 0 0 L 5 5 L 10 0 Z" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                        <Path.LayoutTransform>
                                                            <RotateTransform x:Name="RotateTransform" Angle="0"/>
                                                        </Path.LayoutTransform>
                                                    </Path>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Style.Resources>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background">
                                        <Setter.Value>
                                            <SolidColorBrush Color="White" Opacity="0.3"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                                        <Grid x:Name="GridRoot">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="10" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="10" />
                                            </Grid.RowDefinitions>

                                            <Border Grid.Row="1" Background="{TemplateBinding Background}" CornerRadius="3"/>

                                            <!-- 上面的三角形 -->
                                            <RepeatButton Grid.Row="0" x:Name="DecreaseRepeat" Command="ScrollBar.LineUpCommand" Style="{StaticResource ResourceKey=StyleRepeatButtonDecrease}"/>

                                            <Grid Grid.Row="1">
                                                <!-- 滑动条 -->
                                                <Track x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                                                    <Track.Thumb>
                                                        <Thumb x:Name="Thumb" Style="{StaticResource ResourceKey=StyleThumbLocal}"/>
                                                    </Track.Thumb>
                                                    <Track.IncreaseRepeatButton>
                                                        <RepeatButton x:Name="PageUp" Style="{StaticResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand" />
                                                    </Track.IncreaseRepeatButton>
                                                    <Track.DecreaseRepeatButton>
                                                        <RepeatButton x:Name="PageDown" Style="{StaticResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand" />
                                                    </Track.DecreaseRepeatButton>
                                                </Track>
                                            </Grid>

                                            <!-- 下面的三角形 -->
                                            <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Command="ScrollBar.LineDownCommand" Style="{StaticResource ResourceKey=StyleRepeatButtonIncrease}"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="Orientation" Value="Horizontal">
                                                <Setter Property="LayoutTransform" TargetName="GridRoot">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="-90" />
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                                                <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat" />
                                                <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat" />
                                                <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                                                <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                    </ControlTemplate.Resources>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="8"/>
                            <ColumnDefinition Width="3"/>
                        </Grid.ColumnDefinitions>

                        <muct:DrawingArea Grid.Column="0" x:Name="PART_DrawingArea" Background="Transparent"
                                          Margin="{TemplateBinding Padding}"/>

                        <ScrollBar Grid.Column="1" x:Name="PART_Scrollbar" Visibility="Collapsed"
                                   Style="{StaticResource ResourceKey=StyleScrollBar}"/>

                    </Grid>

                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleTextBox" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3003}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3004}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3001}"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3002}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleButton" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3053}"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3054}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Padding" Value="2,2,0,0"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3055}"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3056}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3057}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3051}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3052}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid>

                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseLayoutRounding="True" SnapsToDevicePixels="True"
                                Background="{TemplateBinding Background}"/>

                        <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES9003E}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES9004E}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES9005E}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES9006E}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES9001E}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES9002E}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleListBox" TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ResourceKey=StyleListBoxItem}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES8001E}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"/>

                        <ScrollViewer CanContentScroll="False">
                            <ItemsPresenter Margin="{TemplateBinding Padding}"/>
                        </ScrollViewer>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <ControlTemplate.Resources>

                        <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
                            <Setter Property="Focusable" Value="False" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">

                                        <Grid Background="Transparent">

                                            <Border x:Name="Collapsed">
                                                <Border.Background>
                                                    <DrawingBrush Stretch="Uniform">
                                                        <DrawingBrush.Drawing>
                                                            <GeometryDrawing Brush="Black">
                                                                <GeometryDrawing.Geometry>
                                                                    <PathGeometry Figures="M558.933333 490.666667L384 665.6l59.733333 59.733333 234.666667-234.666666L443.733333 256 384 315.733333l174.933333 174.933334z"/>
                                                                </GeometryDrawing.Geometry>
                                                            </GeometryDrawing>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Border.Background>
                                            </Border>

                                            <Border x:Name="Expanded" Visibility="Hidden">
                                                <Border.Background>
                                                    <DrawingBrush Stretch="Uniform">
                                                        <DrawingBrush.Drawing>
                                                            <GeometryDrawing Brush="Black">
                                                                <GeometryDrawing.Geometry>
                                                                    <PathGeometry Figures="M533.333333 516.266667l-174.933333-170.666667-64 59.733333 234.666667 234.666667L768 405.333333l-59.733333-59.733333-174.933334 170.666667z"/>
                                                                </GeometryDrawing.Geometry>
                                                            </GeometryDrawing>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Border.Background>
                                            </Border>

                                        </Grid>

                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="Visibility" Value="Hidden" TargetName="Collapsed"/>
                                                <Setter Property="Visibility" Value="Visible" TargetName="Expanded"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>

                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                    </ControlTemplate.Resources>

                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="25" Height="Auto" />
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0" x:Name="Bd" Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">

                            <Grid Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Converter={StaticResource ResourceKey=TreeViewItemIndentConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" x:Name="ColumnDefinition1"/>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <ToggleButton Grid.Column="0" Width="8" Height="8" x:Name="Expander" VerticalAlignment="Center" HorizontalAlignment="Center"
                                              ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource ExpandCollapseToggleStyle}" />

                                <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                            </Grid>

                        </Border>

                        <ItemsPresenter Grid.Row="1" x:Name="ItemsHost" Visibility="Collapsed"/>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Bd">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3253E}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3254E}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3252E}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3251E}"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ItemsHost"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ResourceKey=StyleTreeViewItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES5033E}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES5032E}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="Padding" Value="10,0,0,0" />
    </Style>
    <Style x:Key="StyleDataGridRow" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES5031E}"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES5030E}"/>
            </Trigger>
            <!--<Trigger Property="AlternationIndex" Value="0">
                            <Setter Property="BorderBrush" Value="Blue"/>
                        </Trigger>-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES5002E}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES5011E}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>
    <Style x:Key="StyleDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES4000E}" />
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES4001E}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <!-- 定义列头的样式 -->
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource ResourceKey=StyleDataGridColumnHeader}"/>
        <!-- 定义行的样式 -->
        <Setter Property="RowStyle" Value="{StaticResource ResourceKey=StyleDataGridRow}"/>

        <!-- 定义单元格的样式 -->
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsMouseOver}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=RES5001E}" />
                            <Setter Property="Foreground" Value="Black"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=RES5010E}" />
                            <Setter Property="Foreground" Value="Black"/>
                        </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="Padding" Value="10,0,10,0"/>
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                <Grid>
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      Margin="{TemplateBinding Padding}"/>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3151}"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3152}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3156}"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3157}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3154}"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3155}"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                          x:Name="contentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleComboBox" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3101}"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3102}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3103}"/>
            </Trigger>
            <!--<Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3004}"/>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Silver"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3104}"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3105}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ResourceKey=StyleComboBoxItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">

                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton" x:Key="ComboToggleStyle">
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!--<Setter Property="Background" Value="{DynamicResource ResourceKey=BrushComboBoxMouseOverBackground}"/>-->
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <!--<Setter Property="Background" Value="{DynamicResource ResourceKey=BrushComboBoxMousePressedBackground}"/>-->
                                </Trigger>
                            </Style.Triggers>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="{x:Null}"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Padding" Value="3"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid>
                                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="contentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Border x:Name="ContentPresenterBorder">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="15"/>
                                </Grid.ColumnDefinitions>

                                <Border Grid.Column="0" Grid.ColumnSpan="2" x:Name="BorderBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>

                                <ToggleButton Grid.Column="0" Grid.ColumnSpan="2" BorderThickness="{TemplateBinding BorderThickness}" HorizontalContentAlignment="Right" HorizontalAlignment="Stretch" 
                                              x:Name="DropDownToggle" VerticalAlignment="Stretch" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                              ClickMode="Press" Style="{StaticResource ResourceKey=ComboToggleStyle}">
                                    <Path Height="4" HorizontalAlignment="Right" Margin="0,0,6,0" x:Name="BtnArrow" Width="8" Stretch="Uniform"
                                              Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Fill="Black"/>
                                </ToggleButton>

                                <ContentPresenter Grid.Column="0" x:Name="ContentSite" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,5,0"
                                                  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"     
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                                <TextBox Grid.Column="0" x:Name="PART_EditableTextBox" Visibility="Collapsed" VerticalContentAlignment="Center" Margin="5,0,5,0"
                                         BorderBrush="{x:Null}" BorderThickness="0" Background="Transparent" Text="{Binding Path=Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                            </Grid>
                        </Border>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="None">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" Width="Auto" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border Height="Auto" HorizontalAlignment="Stretch" x:Name="PopupBorder"
                                        BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                        BorderThickness="1,0,1,1" ClipToBounds="False">
                                    <ScrollViewer BorderThickness="0" BorderBrush="{x:Null}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" 
                                                      VerticalScrollBarVisibility="Auto" CanContentScroll="True" ClipToBounds="True" Margin="2,2,2,2">
                                        <ItemsPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <!--<Setter Property="BorderThickness" Value="1,1,1,0" TargetName="BorderBackground"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem控件的样式写成全局的，不然有些MenuItem会不生效... -->
    <Style x:Key="StyleMenuItem" TargetType="{x:Type MenuItem}">
        <Style.Resources>

            <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
            <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
            <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
            <Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>

            <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
            <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
                <Setter Property="ClickMode" Value="Hover"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border x:Name="templateRoot" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
                <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border Grid.Column="0" Grid.Row="1">
                                    <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
                                </Border>
                                <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
                                    <RepeatButton.Visibility>
                                        <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </RepeatButton.Visibility>
                                    <Path Data="{StaticResource UpArrow}" Fill="Black"/>
                                </RepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
                                    <RepeatButton.Visibility>
                                        <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </RepeatButton.Visibility>
                                    <Path Data="{StaticResource DownArrow}" Fill="Black"/>
                                </RepeatButton>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 根节点使用，根节点下面有子节点 -->
            <ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type MenuItem}">
                <Border x:Name="templateRoot" Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="0" x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                        <Path Grid.Column="0" x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{TemplateBinding Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                        <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                               Placement="Bottom" PopupAnimation="None" PlacementTarget="{Binding ElementName=templateRoot}" VerticalOffset="-1">
                            <Grid>
                                <Border x:Name="SubMenuBorder" Background="{DynamicResource ResourceKey=RES3401E}" 
                                        BorderBrush="{DynamicResource ResourceKey=RES3402E}" BorderThickness="1"/>
                                <Border Background="{DynamicResource ResourceKey=RES3401E}" Height="1"
                                        Width="{TemplateBinding ActualWidth, Converter={StaticResource ResourceKey=MenuItemHeaderBottomBorderConverter}}"
                                        HorizontalAlignment="Left" VerticalAlignment="Top" Margin="1,0,0,0"/>

                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}"
                                          Margin="2">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                        </Canvas>
                                        <Rectangle Fill="{DynamicResource ResourceKey=RES3440E}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <!--<Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>-->
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3420E}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3421E}"/>
                    </Trigger>
                    <Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3401E}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3402E}"/>
                    </Trigger>
                    <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
                        </Trigger>-->
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- 根节点使用，根节点下面没有子节点 -->
            <ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type MenuItem}">
                <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                    <Grid VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                        <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="Black" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                        <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3420E}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3421E}"/>
                    </Trigger>
                    <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
                        </Trigger>-->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsHighlighted" Value="True"/>
                            <Condition Property="IsEnabled" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                        <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- 子节点使用，子节点下面没有子节点了 -->
            <ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type MenuItem}">
                <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
                    <Grid Margin="-1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                            <ColumnDefinition Width="13"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                            <ColumnDefinition Width="20"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                        <Border x:Name="GlyphPanel" Background="Red" BorderBrush="Green" BorderThickness="1" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                            <Path x:Name="Glyph" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="Black" Height="11" Width="10"/>
                        </Border>
                        <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3451E}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3452E}"/>
                    </Trigger>
                    <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                        </Trigger>-->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsHighlighted" Value="True"/>
                            <Condition Property="IsEnabled" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                        <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- 子节点使用，子节点下面还有子节点 -->
            <ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="{x:Type MenuItem}">
                <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                            <ColumnDefinition Width="13"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                            <ColumnDefinition Width="20"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                        <Border x:Name="GlyphPanel" Background="{DynamicResource ResourceKey=RES3401E}" BorderBrush="{DynamicResource ResourceKey=RES3402E}" BorderThickness="1" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                            <Path x:Name="Glyph" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="Black" Height="11" Width="9"/>
                        </Border>
                        <ContentPresenter ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                        <Path x:Name="RightArrow" Grid.Column="5" Data="{StaticResource RightArrow}" Fill="Black" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
                            <Grid>
                                <Border x:Name="SubMenuBorder" Background="{DynamicResource ResourceKey=RES3401E}" 
                                            BorderBrush="{DynamicResource ResourceKey=RES3402E}" BorderThickness="1"/>

                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}"
                                                  Margin="2">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                        </Canvas>
                                        <Rectangle Fill="{DynamicResource ResourceKey=RES3440E}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                    </Grid>
                                </ScrollViewer>
                            </Grid>

                        </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <!--<Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>-->
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES3451E}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES3452E}"/>
                    </Trigger>
                    <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            <Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
                        </Trigger>-->
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

        </Style.Resources>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource ResourceKey=RES3450E}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ResourceKey=StyleMenuItem}">
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="True" UseLayoutRounding="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=1523}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=1524}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>

                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"/>
                        <ItemsPresenter Margin="{TemplateBinding Padding}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 不知道怎么给每个控件单独指定Scrollbar的样式，所以写成全局的 -->
    <Style TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <!-- 拖动标样式 -->
            <Style x:Key="StyleThumbLocal" TargetType="{x:Type Thumb}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10508E}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10510E}"/>
                    </Trigger>
                </Style.Triggers>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10506E}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid x:Name="Grid">
                                <Border Background="{TemplateBinding Background}" Width="{TemplateBinding Width}"
                                        CornerRadius="3" Opacity="{TemplateBinding Opacity}"/>
                                <!--<Rectangle HorizontalAlignment="Stretch" x:Name="HoverRectangle" 
                                           VerticalAlignment="Stretch" Width="{TemplateBinding Width}" 
                                           Stroke="{x:Null}" Fill="{TemplateBinding Background}"
                                           Opacity="{TemplateBinding Opacity}"/>-->
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsFocused" Value="True" />
                                <Trigger Property="IsEnabled" Value="False" >
                                    <Setter Property="Opacity" TargetName="Grid" Value="0.1"/>
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 拖动条两边的RepeatButton -->
            <Style x:Key="NuclearScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10520E}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10522E}"/>
                    </Trigger>
                </Style.Triggers>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10518E}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" 
                                       StrokeThickness="{TemplateBinding BorderThickness}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="StyleRepeatButtonBase" TargetType="{x:Type RepeatButton}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10514E}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10516E}"/>
                    </Trigger>
                </Style.Triggers>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10512E}"/>
            </Style>
            <Style x:Key="StyleRepeatButtonDecrease" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ResourceKey=StyleRepeatButtonBase}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Data="M 0 0 L 5 5 L 10 0 Z" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                    <Path.LayoutTransform>
                                        <RotateTransform x:Name="RotateTransform" Angle="180"/>
                                    </Path.LayoutTransform>
                                </Path>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="StyleRepeatButtonIncrease" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ResourceKey=StyleRepeatButtonBase}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Data="M 0 0 L 5 5 L 10 0 Z" Fill="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                    <Path.LayoutTransform>
                                        <RotateTransform x:Name="RotateTransform" Angle="0"/>
                                    </Path.LayoutTransform>
                                </Path>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10502E}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES10500E}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="10" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="10" />
                        </Grid.RowDefinitions>

                        <Border Grid.Row="1" Background="{TemplateBinding Background}" CornerRadius="3"/>

                        <!-- 上面的三角形 -->
                        <RepeatButton Grid.Row="0" x:Name="DecreaseRepeat" Command="ScrollBar.LineUpCommand" Style="{StaticResource ResourceKey=StyleRepeatButtonDecrease}"/>

                        <Grid Grid.Row="1">
                            <!-- 滑动条 -->
                            <Track x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Style="{StaticResource ResourceKey=StyleThumbLocal}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Style="{StaticResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Style="{StaticResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>

                        <!-- 下面的三角形 -->
                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Command="ScrollBar.LineDownCommand" Style="{StaticResource ResourceKey=StyleRepeatButtonIncrease}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleMdButton" TargetType="{x:Type mcontrol:MdButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type mcontrol:MdButton}">

                    <Grid>

                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseLayoutRounding="True" SnapsToDevicePixels="True"/>

                        <Border x:Name="BorderBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Border Margin="{TemplateBinding SVGMargin}">
                                <Border.Background>
                                    <DrawingBrush Stretch="Uniform">
                                        <DrawingBrush.Drawing>
                                            <GeometryDrawing Brush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SVGColor}">
                                                <GeometryDrawing.Geometry>
                                                    <PathGeometry Figures="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SVGPath}"/>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Border.Background>
                            </Border>
                        </Border>

                        <Border x:Name="BorderMouseOver" Background="{TemplateBinding MouseOverBrush}" BorderBrush="{TemplateBinding MouseOverBorder}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed">
                            <Border Margin="{TemplateBinding SVGMargin}">
                                <Border.Background>
                                    <DrawingBrush Stretch="Uniform">
                                        <DrawingBrush.Drawing>
                                            <GeometryDrawing Brush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SVGMouseOverColor}">
                                                <GeometryDrawing.Geometry>
                                                    <PathGeometry Figures="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SVGPath}"/>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Border.Background>
                            </Border>
                        </Border>

                        <Border x:Name="BorderMouseDown" Background="{TemplateBinding MouseDownBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed">
                            <Border Margin="{TemplateBinding SVGMargin}">
                                <Border.Background>
                                    <DrawingBrush Stretch="Uniform">
                                        <DrawingBrush.Drawing>
                                            <GeometryDrawing Brush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SVGMouseDownColor}">
                                                <GeometryDrawing.Geometry>
                                                    <PathGeometry Figures="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SVGPath}"/>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Border.Background>
                            </Border>
                        </Border>

                        <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="BorderMouseOver"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="BorderMouseDown"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleMdImageButton" TargetType="{x:Type mcontrol:MdButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES200003}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES200004}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Padding" Value="3,3,0,0"/>
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES200005}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES200006}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES200001}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES200002}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type mcontrol:MdButton}">

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Border Grid.Column="0" Grid.ColumnSpan="999" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                UseLayoutRounding="True" SnapsToDevicePixels="True" Background="{TemplateBinding Background}"/>

                        <Image Grid.Column="0" Source="{TemplateBinding ImageSource}" Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}"
                               Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                        <ContentPresenter Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StyleMdButtonTool" TargetType="{x:Type mcontrol:MdButton}" BasedOn="{StaticResource ResourceKey=StyleMdButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES66002E}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ResourceKey=RES66003E}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="0,0,5,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="MouseOverBorder" Value="Black"/>
        <Setter Property="SVGMargin" Value="5"/>
        <Setter Property="SVGColor" Value="#474747"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <!--<Setter Property="BorderBrush" Value="Silver"/>-->
    </Style>

    <Style x:Key="StyleMdWindow" TargetType="{x:Type mcontrol:MdWindow}">
        <Style.Triggers>
            <Trigger Property="CanResize" Value="False">
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="5" GlassFrameThickness="1" NonClientFrameEdges="None" CaptionHeight="30" CornerRadius="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="CanResize" Value="False"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES6001E}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=RES6003E}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type mcontrol:MdWindow}">

                    <ControlTemplate.Resources>

                        <Style x:Key="StyleMTermButtonTitle" TargetType="{x:Type mcontrol:MdButton}" BasedOn="{StaticResource ResourceKey=StyleMdButton}">
                            <Setter Property="Margin" Value="3"/>
                            <Setter Property="Width" Value="25"/>
                            <Setter Property="SVGMargin" Value="7"/>
                            <Setter Property="SVGColor" Value="{DynamicResource ResourceKey=RES6010E}"/>
                            <Setter Property="SVGMouseOverColor" Value="{DynamicResource ResourceKey=RES6011E}"/>
                            <Setter Property="SVGMouseDownColor" Value="{DynamicResource ResourceKey=RES6012E}"/>
                            <Setter Property="MouseOverBrush" Value="{DynamicResource ResourceKey=RES6008E}"/>
                            <Setter Property="MouseDownBrush" Value="{DynamicResource ResourceKey=RES6006E}"/>
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=RES6004E}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=RES6005E}"/>
                            <Setter Property="BorderThickness" Value="1"/>
                        </Style>

                    </ControlTemplate.Resources>

                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0" Grid.RowSpan="99" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>

                        <Grid Grid.Row="0" x:Name="PART_Title">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Border Grid.Column="0" Grid.ColumnSpan="99" Background="{DynamicResource ResourceKey=RES6002E}"/>

                            <Image Grid.Column="0" Source="{DynamicResource ResourceKey=1}" Width="20" Height="20"/>

                            <TextBlock Grid.Column="1" Text="{TemplateBinding Title}" VerticalAlignment="Center" HorizontalAlignment="Left"/>

                            <mcontrol:MdButton Grid.Column="2" x:Name="PART_MinButton" SVGPath="{StaticResource ResourceKey=SVGIcon10}" Style="{StaticResource ResourceKey=StyleMTermButtonTitle}"/>

                            <mcontrol:MdButton Grid.Column="3" x:Name="PART_MaxButton" SVGPath="{StaticResource ResourceKey=SVGIcon11}" Style="{StaticResource ResourceKey=StyleMTermButtonTitle}"/>

                            <mcontrol:MdButton Grid.Column="4" x:Name="PART_CloseButton" SVGPath="{StaticResource ResourceKey=SVGIcon6}" Style="{StaticResource ResourceKey=StyleMTermButtonTitle}"/>

                        </Grid>

                        <ContentPresenter Grid.Row="1"/>

                        <Border Grid.Row="0" Grid.RowSpan="999" BorderThickness="1" BorderBrush="{DynamicResource ResourceKey=RES50001E}" IsHitTestVisible="False"/>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="CanResize" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MinButton"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaxButton"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
